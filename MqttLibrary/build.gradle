// Build script for the Craxiom MQTT Connection library
//
// The user must have run the following commands to be able to publish a version to Sonatype Maven Central:
//   gradle addCredentials --key sonatypeUsername --value <username>
//   gradle addCredentials --key sonatypePassword --value <password>
//   gradle addCredentials --key sonatypeKeyPassword --value <password>
//
// From there, execute `./gradlew clean build publish` to build, sign, and upload all the artifacts.
// The final step is to log in to https://oss.sonatype.org/#stagingRepositories to close and release the staging repo

plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
    id 'nu.studer.credentials' version '1.0.7'
}

group 'com.craxiom'
version '0.1.0-SNAPSHOT'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable('AllowBackup', 'GoogleAppIndexingWarning', 'MissingApplicationIcon')
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

ext {
    sonatypeUsername = findCredentialValue('Username')
    sonatypePassword = findCredentialValue('Password')
    ext."signing.password" = findCredentialValue('KeyPassword')
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    compileOnly 'com.google.android.things:androidthings:1.0'

    api 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5'
    api 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'

    implementation "com.google.protobuf:protobuf-java-util:3.11.4"
    implementation 'com.jakewharton.timber:timber:4.7.1'
}

configurations.maybeCreate("default")
def publishArtifact = artifacts.add("default", file('build/outputs/aar/MqttLibrary-debug.aar'))

// Configure publishing to the Sonatype Maven Central repo
publishing {
    publications {
        aar(MavenPublication) {
            artifactId 'mqtt-library'
            artifact publishArtifact

            pom {
                name = 'MQTT Connection Library'
                description = 'An MQTT UI and connection controller that can be used in an Android app\''
                url = 'https://github.com/christianrowlands/android-mqtt-connection-lib'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://github.com/christianrowlands/android-mqtt-connection-lib/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'christianrowlands'
                        name = 'Christian Rowlands'
                        email = 'christian.rowlands@gmail.com'
                    }
                }

                scm {
                    url = 'https://github.com/christianrowlands/android-mqtt-connection-lib'
                    connection = 'scm:git:git://github.com/christianrowlands/android-mqtt-connection-lib.git'
                    developerConnection = 'scm:git:ssh://git@github.com:christianrowlands/android-mqtt-connection-lib.git'
                }

                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/christianrowlands/android-mqtt-connection-lib/issues'
                }

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    // Iterate over the api dependencies to add a dependency node for each
                    configurations.api.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
        mavenLocal()
    }
}

signing {
    sign publishing.publications
}

/**
 * Try to locate a credential value (username or password) in the credentials store.
 *
 * @param value The suffix to use for the credential lookup key.  It will be appended to "sonatype".
 * @return The credential value if located.
 */
private String findCredentialValue(String value) {
    return project.credentials."sonatype$value"
}
